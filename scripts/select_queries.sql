-- Query 1: Retrieve the names of all users who have made more than one reservation.
SELECT u.name, COUNT(*) AS total_reservations
FROM users u
INNER JOIN reservations r ON u.user_id = r.user_id
GROUP BY u.name
HAVING COUNT(*) > 1;

-- Query 2: Calculate the total revenue generated by each room type and the running total revenue for each room type.
SELECT rm.room_type, SUM(r.price_with_discount) AS total_revenue,
       SUM(SUM(r.price_with_discount)) OVER(PARTITION BY rm.room_type ORDER BY rm.room_id) AS running_total_revenue
FROM rooms rm
INNER JOIN reservations r ON rm.room_id = r.room_id
GROUP BY rm.room_type, rm.room_id
ORDER BY rm.room_type;

-- Query 3: Calculate the total spending for each user and rank them based on their total spending.
SELECT u.name, SUM(r.price_with_discount) AS total_spending,
       RANK() OVER (ORDER BY SUM(r.price_with_discount) DESC) AS rank
FROM users u
INNER JOIN reservations r ON u.user_id = r.user_id
GROUP BY u.user_id
ORDER BY rank;

-- Query 4: Calculate the number of reservations made by each user and order the results by the number of reservations in descending order.
SELECT u.name, COUNT(*) AS num_reservations
FROM users u
INNER JOIN reservations r ON u.user_id = r.user_id
GROUP BY u.user_id
ORDER BY num_reservations DESC;

-- Query 5: Retrieve the names of all cities where there is more than one room.
SELECT rm.city
FROM rooms rm
GROUP BY rm.city
HAVING COUNT(*) > 1;

-- Query 6: Calculate the total spending for each user and the percentage of total spending that each user represents.
SELECT u.name, SUM(r.price_with_discount) AS total_spending,
       100.0 * SUM(r.price_with_discount) / SUM(SUM(r.price_with_discount)) OVER() AS percent_of_total_spending
FROM users u
INNER JOIN reservations r ON u.user_id = r.user_id
GROUP BY u.user_id
ORDER BY total_spending DESC;
